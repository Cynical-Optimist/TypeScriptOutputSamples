// Generated by morphir-elm

import { Morphir_IR_AccessControlled } from "./../../morphir/ir/AccessControlled"
import { Morphir_IR_Documented } from "./../../morphir/ir/Documented"
import { Morphir_IR_Name } from "./../../morphir/ir/Name"
import { Morphir_IR_Path } from "./../../morphir/ir/Path"
import { Morphir_IR_Type } from "./../../morphir/ir/Type"
import { Morphir_IR_Value } from "./../../morphir/ir/Value"

export namespace Morphir_IR_Module {
  /* Type that represents a module definition. A module definition contains all the details
  including implementation and private types and values.
  
  A module contains types and values which is represented by two field in this type:
  
    - types: a dictionary of local name to access controlled, documented type specification.
    - values: a dictionary of local name to access controlled value specification.
  
  */
  export type Definition<ta, va> = {
    types: Array<[Morphir_IR_Name.Name, Morphir_IR_AccessControlled.AccessControlled<Morphir_IR_Documented.Documented<Morphir_IR_Type.Definition<ta>>>]>;
    values: Array<[Morphir_IR_Name.Name, Morphir_IR_AccessControlled.AccessControlled<Morphir_IR_Value.Definition<ta, va>>]>;
  }
  
  /* A module name is a unique identifier for a module within a package. It is represented by a path, which is a list of
  names.
  */
  export type ModuleName = Morphir_IR_Path.Path
  
  /* Type that represents a module specification. A module specification only contains types that are exposed
  publicly and type signatures for values that are exposed publicly.
  
  A module contains types and values which is represented by two field in this type:
  
    - types: a dictionary of local name to documented type specification.
    - values: a dictionary of local name to value specification.
  
  */
  export type Specification<ta> = {
    types: Array<[Morphir_IR_Name.Name, Morphir_IR_Documented.Documented<Morphir_IR_Type.Specification<ta>>]>;
    values: Array<[Morphir_IR_Name.Name, Morphir_IR_Value.Specification<ta>]>;
  }
  
}

