// Generated by morphir-elm

import * as codecs from "./../../morphir/internal/Codecs";

export namespace Morphir_IR_AccessControlled {
  /* Public or private access.
   */
  export type Access = Private | Public;

  export function decodeAccess(input: any): Access {
    let kind = codecs.parseKindFromCustomTypeInput(input);
    switch (kind) {
      case "Private":
        return decodePrivate(input);
      case "Public":
        return decodePublic(input);
    }
    codecs.raiseDecodeErrorFromCustomType("Access", kind);
  }

  export function encodeAccess(value: Access): any {
    switch (value.kind) {
      case "Private":
        return encodePrivate(value);
      case "Public":
        return encodePublic(value);
    }
  }

  export class Private {
    kind: "Private" = "Private";

    constructor() {}
  }

  export function decodePrivate(input: any): Private {
    codecs.preprocessCustomTypeVariant("Private", 0, input);
    return new Private();
  }

  export function encodePrivate(value: Private): any {
    return value.kind;
  }

  export class Public {
    kind: "Public" = "Public";

    constructor() {}
  }

  export function decodePublic(input: any): Public {
    codecs.preprocessCustomTypeVariant("Public", 0, input);
    return new Public();
  }

  export function encodePublic(value: Public): any {
    return value.kind;
  }

  /* Type that represents different access levels.
   */
  export type AccessControlled<A> = {
    access: Morphir_IR_AccessControlled.Access;
    value: A;
  };

  export function decodeAccessControlled<A>(
    decodeA: (input: any) => A,
    input: any
  ): AccessControlled<A> {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        ["access", Morphir_IR_AccessControlled.decodeAccess],
        ["value", decodeA],
      ]),
      input
    );
  }

  export function encodeAccessControlled<A>(
    encodeA: (value: A) => any,
    value: AccessControlled<A>
  ): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        ["access", Morphir_IR_AccessControlled.encodeAccess],
        ["value", encodeA],
      ]),
      value
    );
  }
}
