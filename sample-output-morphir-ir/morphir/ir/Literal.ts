// Generated by morphir-elm

import * as codecs from "./../../morphir/internal/Codecs"

export namespace Morphir_IR_Literal {
  /* Type that represents a literal value.
  */
  export type Literal = BoolLiteral | CharLiteral | FloatLiteral | StringLiteral | WholeNumberLiteral
  
  export function decodeLiteral(varDecoders, input) {
  let decoderMap = new Map();
  decoderMap.set("BoolLiteral", decodeBoolLiteral.bind(varDecoders));
  decoderMap.set("CharLiteral", decodeCharLiteral.bind(varDecoders));
  decoderMap.set("FloatLiteral", decodeFloatLiteral.bind(varDecoders));
  decoderMap.set("StringLiteral", decodeStringLiteral.bind(varDecoders));
  decoderMap.set("WholeNumberLiteral", decodeWholeNumberLiteral.bind(varDecoders));
  codecs.decodeCustomType(decoderMap, input);
  }
  
  
  
  export interface BoolLiteral {
    kind: "BoolLiteral";
    arg1: boolean;
  }
  
  export function decodeBoolLiteral(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("BoolLiteral", ["Arg1"], [codecs.decodeBoolean.bind(null)], input);
  }
  
  export interface CharLiteral {
    kind: "CharLiteral";
    arg1: string;
  }
  
  export function decodeCharLiteral(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("CharLiteral", ["Arg1"], [codecs.decodeChar.bind(null)], input);
  }
  
  export interface FloatLiteral {
    kind: "FloatLiteral";
    arg1: number;
  }
  
  export function decodeFloatLiteral(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("FloatLiteral", ["Arg1"], [codecs.decodeFloat.bind(null)], input);
  }
  
  export interface StringLiteral {
    kind: "StringLiteral";
    arg1: string;
  }
  
  export function decodeStringLiteral(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("StringLiteral", ["Arg1"], [codecs.decodeString.bind(null)], input);
  }
  
  export interface WholeNumberLiteral {
    kind: "WholeNumberLiteral";
    arg1: number;
  }
  
  export function decodeWholeNumberLiteral(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("WholeNumberLiteral", ["Arg1"], [codecs.decodeInt.bind(null)], input);
  }
  
}

