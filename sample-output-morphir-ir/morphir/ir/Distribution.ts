// Generated by morphir-elm

import * as codecs from "./../../morphir/internal/Codecs";
import { Morphir_IR_Package } from "./../../morphir/ir/Package";
import { Morphir_IR_Type } from "./../../morphir/ir/Type";

export namespace Morphir_IR_Distribution {
  /* Type that represents a package distribution. Currently the only distribution type we provide is a `Library`.
   */
  export type Distribution = Library;

  export function decodeDistribution(input: any): Distribution {
    let kind = codecs.parseKindFromCustomTypeInput(input);
    switch (kind) {
      case "Library":
        return decodeLibrary(input);
    }
    codecs.raiseDecodeErrorFromCustomType("Distribution", kind);
  }

  export function encodeDistribution(value: Distribution): any {
    switch (value.kind) {
      case "Library":
        return encodeLibrary(value);
    }
  }

  export class Library {
    kind: "Library" = "Library";

    constructor(
      public arg1: Morphir_IR_Package.PackageName,
      public arg2: Map<
        Morphir_IR_Package.PackageName,
        Morphir_IR_Package.Specification<[]>
      >,
      public arg3: Morphir_IR_Package.Definition<[], Morphir_IR_Type.Type<[]>>
    ) {}
  }

  export function decodeLibrary(input: any): Library {
    codecs.preprocessCustomTypeVariant("Library", 3, input);
    return new Library(
      Morphir_IR_Package.decodePackageName(input[1]),
      codecs.decodeDict(
        Morphir_IR_Package.decodePackageName,
        Morphir_IR_Package.decodeSpecification.bind(null, codecs.decodeUnit),
        input[2]
      ),
      Morphir_IR_Package.decodeDefinition(
        codecs.decodeUnit,
        Morphir_IR_Type.decodeType.bind(null, codecs.decodeUnit),
        input[3]
      )
    );
  }

  export function encodeLibrary(value: Library): any {
    return [
      value.kind,
      Morphir_IR_Package.encodePackageName(value.arg1),
      codecs.encodeDict(
        Morphir_IR_Package.encodePackageName,
        Morphir_IR_Package.encodeSpecification.bind(null, codecs.encodeUnit),
        value.arg2
      ),
      Morphir_IR_Package.encodeDefinition(
        codecs.encodeUnit,
        Morphir_IR_Type.encodeType.bind(null, codecs.encodeUnit),
        value.arg3
      ),
    ];
  }
}
