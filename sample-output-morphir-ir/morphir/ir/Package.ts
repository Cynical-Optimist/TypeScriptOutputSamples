// Generated by morphir-elm

import * as codecs from "./../../morphir/internal/Codecs"
import { Morphir_IR_AccessControlled } from "./../../morphir/ir/AccessControlled"
import { Morphir_IR_Module } from "./../../morphir/ir/Module"
import { Morphir_IR_Path } from "./../../morphir/ir/Path"

export namespace Morphir_IR_Package {
  /* Type that represents a package definition. A package definition contains all the details including implementation
  and private types and values. The modules field is a dictionary keyed by module name that contains access controlled
  module definitions. The `AccessControlled` adds access classifiers to each module to differentiate public and private
  modules.
  */
  export type Definition<ta, va> = {
    modules: Array<[Morphir_IR_Module.ModuleName, Morphir_IR_AccessControlled.AccessControlled<Morphir_IR_Module.Definition<ta, va>>]>;
  }
  
  export function decodeDefinition(varDecoders, input) {
  return codecs.decodeRecord(new Map([["modules", codecs.decodeDict.bind(null, codecs.decodeUnit.bind(null), codecs.decodeUnit.bind(null))]]), input);
  }
  
  export function encodeDefinition(varEncoders, value) {
  return codecs.encodeRecord(new Map([["modules", codecs.encodeDict.bind(null, codecs.encodeUnit.bind(null), codecs.encodeUnit.bind(null))]]), value);
  }
  
  /* A package name is a globally unique identifier for a package. It is represented by a path, which is a list of names.
  */
  export type PackageName = Morphir_IR_Path.Path
  
  export function decodePackageName(varDecoders, input) {
  return codecs.decodeUnit(input);
  }
  
  export function encodePackageName(varEncoders, value) {
  return codecs.encodeUnit(value);
  }
  
  /* Type that represents a package specification. A package specification only contains types that are exposed publicly
  and type signatures for values that are exposed publicly.
  */
  export type Specification<ta> = {
    modules: Array<[Morphir_IR_Module.ModuleName, Morphir_IR_Module.Specification<ta>]>;
  }
  
  export function decodeSpecification(varDecoders, input) {
  return codecs.decodeRecord(new Map([["modules", codecs.decodeDict.bind(null, codecs.decodeUnit.bind(null), codecs.decodeUnit.bind(null))]]), input);
  }
  
  export function encodeSpecification(varEncoders, value) {
  return codecs.encodeRecord(new Map([["modules", codecs.encodeDict.bind(null, codecs.encodeUnit.bind(null), codecs.encodeUnit.bind(null))]]), value);
  }
  
}

