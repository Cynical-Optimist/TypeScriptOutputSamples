// Generated by morphir-elm

import * as codecs from "./../../morphir/internal/Codecs";
import { Morphir_IR_AccessControlled } from "./../../morphir/ir/AccessControlled";
import { Morphir_IR_Module } from "./../../morphir/ir/Module";
import { Morphir_IR_Path } from "./../../morphir/ir/Path";

export namespace Morphir_IR_Package {
  /* Type that represents a package definition. A package definition contains all the details including implementation
  and private types and values. The modules field is a dictionary keyed by module name that contains access controlled
  module definitions. The `AccessControlled` adds access classifiers to each module to differentiate public and private
  modules.
  */
  export type Definition<Ta, Va> = {
    modules: Map<
      Morphir_IR_Module.ModuleName,
      Morphir_IR_AccessControlled.AccessControlled<
        Morphir_IR_Module.Definition<Ta, Va>
      >
    >;
  };

  export function decodeDefinition<Ta, Va>(
    decodeTa: (input: any) => Ta,
    decodeVa: (input: any) => Va,
    input: any
  ): Definition<Ta, Va> {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        [
          "modules",
          codecs.decodeDict.bind(
            null,
            Morphir_IR_Module.decodeModuleName,
            Morphir_IR_AccessControlled.decodeAccessControlled.bind(
              null,
              Morphir_IR_Module.decodeDefinition.bind(null, decodeTa, decodeVa)
            )
          ),
        ],
      ]),
      input
    );
  }

  export function encodeDefinition<Ta, Va>(
    encodeTa: (value: Ta) => any,
    encodeVa: (value: Va) => any,
    value: Definition<Ta, Va>
  ): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        [
          "modules",
          codecs.encodeDict.bind(
            null,
            Morphir_IR_Module.encodeModuleName,
            Morphir_IR_AccessControlled.encodeAccessControlled.bind(
              null,
              Morphir_IR_Module.encodeDefinition.bind(null, encodeTa, encodeVa)
            )
          ),
        ],
      ]),
      value
    );
  }

  /* A package name is a globally unique identifier for a package. It is represented by a path, which is a list of names.
   */
  export type PackageName = Morphir_IR_Path.Path;

  export function decodePackageName(input: any): PackageName {
    return Morphir_IR_Path.decodePath(input);
  }

  export function encodePackageName(value: PackageName): any {
    return Morphir_IR_Path.encodePath(value);
  }

  /* Type that represents a package specification. A package specification only contains types that are exposed publicly
  and type signatures for values that are exposed publicly.
  */
  export type Specification<Ta> = {
    modules: Map<
      Morphir_IR_Module.ModuleName,
      Morphir_IR_Module.Specification<Ta>
    >;
  };

  export function decodeSpecification<Ta>(
    decodeTa: (input: any) => Ta,
    input: any
  ): Specification<Ta> {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        [
          "modules",
          codecs.decodeDict.bind(
            null,
            Morphir_IR_Module.decodeModuleName,
            Morphir_IR_Module.decodeSpecification.bind(null, decodeTa)
          ),
        ],
      ]),
      input
    );
  }

  export function encodeSpecification<Ta>(
    encodeTa: (value: Ta) => any,
    value: Specification<Ta>
  ): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        [
          "modules",
          codecs.encodeDict.bind(
            null,
            Morphir_IR_Module.encodeModuleName,
            Morphir_IR_Module.encodeSpecification.bind(null, encodeTa)
          ),
        ],
      ]),
      value
    );
  }
}
