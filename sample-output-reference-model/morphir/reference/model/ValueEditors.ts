// Generated by morphir-elm

import * as codecs from "./../../../morphir/internal/Codecs"

export namespace Morphir_Reference_Model_ValueEditors {
  
  export type LargeEnum = Option1 | Option10 | Option11 | Option12 | Option13 | Option14 | Option15 | Option16 | Option17 | Option18 | Option19 | Option2 | Option20 | Option3 | Option4 | Option5 | Option6 | Option7 | Option8 | Option9
  
  export function decodeLargeEnum(varDecoders, input) {
  let decoderMap = new Map();
  decoderMap.set("Option1", decodeOption1.bind(varDecoders));
  decoderMap.set("Option10", decodeOption10.bind(varDecoders));
  decoderMap.set("Option11", decodeOption11.bind(varDecoders));
  decoderMap.set("Option12", decodeOption12.bind(varDecoders));
  decoderMap.set("Option13", decodeOption13.bind(varDecoders));
  decoderMap.set("Option14", decodeOption14.bind(varDecoders));
  decoderMap.set("Option15", decodeOption15.bind(varDecoders));
  decoderMap.set("Option16", decodeOption16.bind(varDecoders));
  decoderMap.set("Option17", decodeOption17.bind(varDecoders));
  decoderMap.set("Option18", decodeOption18.bind(varDecoders));
  decoderMap.set("Option19", decodeOption19.bind(varDecoders));
  decoderMap.set("Option2", decodeOption2.bind(varDecoders));
  decoderMap.set("Option20", decodeOption20.bind(varDecoders));
  decoderMap.set("Option3", decodeOption3.bind(varDecoders));
  decoderMap.set("Option4", decodeOption4.bind(varDecoders));
  decoderMap.set("Option5", decodeOption5.bind(varDecoders));
  decoderMap.set("Option6", decodeOption6.bind(varDecoders));
  decoderMap.set("Option7", decodeOption7.bind(varDecoders));
  decoderMap.set("Option8", decodeOption8.bind(varDecoders));
  decoderMap.set("Option9", decodeOption9.bind(varDecoders));
  codecs.decodeCustomType(decoderMap, input);
  }
  
  
  
  export interface Option1 {
    kind: "Option1";
  }
  
  export function decodeOption1(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option1", [], [], input);
  }
  
  export interface Option10 {
    kind: "Option10";
  }
  
  export function decodeOption10(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option10", [], [], input);
  }
  
  export interface Option11 {
    kind: "Option11";
  }
  
  export function decodeOption11(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option11", [], [], input);
  }
  
  export interface Option12 {
    kind: "Option12";
  }
  
  export function decodeOption12(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option12", [], [], input);
  }
  
  export interface Option13 {
    kind: "Option13";
  }
  
  export function decodeOption13(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option13", [], [], input);
  }
  
  export interface Option14 {
    kind: "Option14";
  }
  
  export function decodeOption14(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option14", [], [], input);
  }
  
  export interface Option15 {
    kind: "Option15";
  }
  
  export function decodeOption15(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option15", [], [], input);
  }
  
  export interface Option16 {
    kind: "Option16";
  }
  
  export function decodeOption16(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option16", [], [], input);
  }
  
  export interface Option17 {
    kind: "Option17";
  }
  
  export function decodeOption17(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option17", [], [], input);
  }
  
  export interface Option18 {
    kind: "Option18";
  }
  
  export function decodeOption18(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option18", [], [], input);
  }
  
  export interface Option19 {
    kind: "Option19";
  }
  
  export function decodeOption19(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option19", [], [], input);
  }
  
  export interface Option2 {
    kind: "Option2";
  }
  
  export function decodeOption2(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option2", [], [], input);
  }
  
  export interface Option20 {
    kind: "Option20";
  }
  
  export function decodeOption20(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option20", [], [], input);
  }
  
  export interface Option3 {
    kind: "Option3";
  }
  
  export function decodeOption3(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option3", [], [], input);
  }
  
  export interface Option4 {
    kind: "Option4";
  }
  
  export function decodeOption4(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option4", [], [], input);
  }
  
  export interface Option5 {
    kind: "Option5";
  }
  
  export function decodeOption5(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option5", [], [], input);
  }
  
  export interface Option6 {
    kind: "Option6";
  }
  
  export function decodeOption6(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option6", [], [], input);
  }
  
  export interface Option7 {
    kind: "Option7";
  }
  
  export function decodeOption7(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option7", [], [], input);
  }
  
  export interface Option8 {
    kind: "Option8";
  }
  
  export function decodeOption8(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option8", [], [], input);
  }
  
  export interface Option9 {
    kind: "Option9";
  }
  
  export function decodeOption9(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Option9", [], [], input);
  }
  
  
  export type Price = number
  
  export function decodePrice(varDecoders, input) {
  return codecs.decodeFloat(input);
  }
  
  export function encodePrice(varEncoders, value) {
  return codecs.encodeFloat(value);
  }
  
  
  export type SmallEnum = OptionOne | OptionThree | OptionTwo
  
  export function decodeSmallEnum(varDecoders, input) {
  let decoderMap = new Map();
  decoderMap.set("OptionOne", decodeOptionOne.bind(varDecoders));
  decoderMap.set("OptionThree", decodeOptionThree.bind(varDecoders));
  decoderMap.set("OptionTwo", decodeOptionTwo.bind(varDecoders));
  codecs.decodeCustomType(decoderMap, input);
  }
  
  
  
  export interface OptionOne {
    kind: "OptionOne";
  }
  
  export function decodeOptionOne(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("OptionOne", [], [], input);
  }
  
  export interface OptionThree {
    kind: "OptionThree";
  }
  
  export function decodeOptionThree(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("OptionThree", [], [], input);
  }
  
  export interface OptionTwo {
    kind: "OptionTwo";
  }
  
  export function decodeOptionTwo(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("OptionTwo", [], [], input);
  }
  
}

