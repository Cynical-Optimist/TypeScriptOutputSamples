// Generated by morphir-elm

import * as codecs from "./../../../../morphir/internal/Codecs";

export namespace Morphir_Reference_Model_Insight_UseCase1 {
  export type Direction = Down | Up;

  export function decodeDirection(input: any): Direction {
    let kind = codecs.parseKindFromCustomTypeInput(input);
    switch (kind) {
      case "Down":
        return decodeDown(input);
      case "Up":
        return decodeUp(input);
    }
    codecs.raiseDecodeErrorFromCustomType("Direction", kind);
  }

  export function encodeDirection(value: Direction): any {
    switch (value.kind) {
      case "Down":
        return encodeDown(value);
      case "Up":
        return encodeUp(value);
    }
  }

  export class Down {
    kind: "Down" = "Down";

    constructor() {}
  }

  export function decodeDown(input: any): Down {
    codecs.preprocessCustomTypeVariant("Down", 0, input);
    return new Down();
  }

  export function encodeDown(value: Down): any {
    return value.kind;
  }

  export class Up {
    kind: "Up" = "Up";

    constructor() {}
  }

  export function decodeUp(input: any): Up {
    codecs.preprocessCustomTypeVariant("Up", 0, input);
    return new Up();
  }

  export function encodeUp(value: Up): any {
    return value.kind;
  }

  export type TrackingAdvantage = {
    direction: Morphir_Reference_Model_Insight_UseCase1.Direction;
    code: string;
    velocity: number;
  };

  export function decodeTrackingAdvantage(input: any): TrackingAdvantage {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        ["direction", Morphir_Reference_Model_Insight_UseCase1.decodeDirection],
        ["code", codecs.decodeString],
        ["velocity", codecs.decodeFloat],
      ]),
      input
    );
  }

  export function encodeTrackingAdvantage(value: TrackingAdvantage): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        ["direction", Morphir_Reference_Model_Insight_UseCase1.encodeDirection],
        ["code", codecs.encodeString],
        ["velocity", codecs.encodeFloat],
      ]),
      value
    );
  }
}
