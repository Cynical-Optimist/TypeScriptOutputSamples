// Generated by morphir-elm

import * as codecs from "./../../../../morphir/internal/Codecs"

export namespace Morphir_Reference_Model_Issues_Issue333 {
  
  export type LocalDate = Invalid | Valid
  
  export function decodeLocalDate(varDecoders, input) {
  let decoderMap = new Map();
  decoderMap.set("Invalid", decodeInvalid.bind(varDecoders));
  decoderMap.set("Valid", decodeValid.bind(varDecoders));
  codecs.decodeCustomType(decoderMap, input);
  }
  
  
  
  export interface Invalid {
    kind: "Invalid";
    arg1: Morphir_Reference_Model_Issues_Issue333.RawLocalDate;
  }
  
  export function decodeInvalid(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Invalid", ["Arg1"], [Morphir_Reference_Model_Issues_Issue333.decodeRawLocalDate.bind(null, varDecoders)], input);
  }
  
  export interface Valid {
    kind: "Valid";
    arg1: Morphir_Reference_Model_Issues_Issue333.ValidLocalDate;
  }
  
  export function decodeValid(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("Valid", ["Arg1"], [Morphir_Reference_Model_Issues_Issue333.decodeValidLocalDate.bind(null, varDecoders)], input);
  }
  
  
  export type Month = April | August | December | February | January | July | June | March | May | November | October | September
  
  export function decodeMonth(varDecoders, input) {
  let decoderMap = new Map();
  decoderMap.set("April", decodeApril.bind(varDecoders));
  decoderMap.set("August", decodeAugust.bind(varDecoders));
  decoderMap.set("December", decodeDecember.bind(varDecoders));
  decoderMap.set("February", decodeFebruary.bind(varDecoders));
  decoderMap.set("January", decodeJanuary.bind(varDecoders));
  decoderMap.set("July", decodeJuly.bind(varDecoders));
  decoderMap.set("June", decodeJune.bind(varDecoders));
  decoderMap.set("March", decodeMarch.bind(varDecoders));
  decoderMap.set("May", decodeMay.bind(varDecoders));
  decoderMap.set("November", decodeNovember.bind(varDecoders));
  decoderMap.set("October", decodeOctober.bind(varDecoders));
  decoderMap.set("September", decodeSeptember.bind(varDecoders));
  codecs.decodeCustomType(decoderMap, input);
  }
  
  
  
  export interface April {
    kind: "April";
  }
  
  export function decodeApril(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("April", [], [], input);
  }
  
  export interface August {
    kind: "August";
  }
  
  export function decodeAugust(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("August", [], [], input);
  }
  
  export interface December {
    kind: "December";
  }
  
  export function decodeDecember(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("December", [], [], input);
  }
  
  export interface February {
    kind: "February";
  }
  
  export function decodeFebruary(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("February", [], [], input);
  }
  
  export interface January {
    kind: "January";
  }
  
  export function decodeJanuary(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("January", [], [], input);
  }
  
  export interface July {
    kind: "July";
  }
  
  export function decodeJuly(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("July", [], [], input);
  }
  
  export interface June {
    kind: "June";
  }
  
  export function decodeJune(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("June", [], [], input);
  }
  
  export interface March {
    kind: "March";
  }
  
  export function decodeMarch(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("March", [], [], input);
  }
  
  export interface May {
    kind: "May";
  }
  
  export function decodeMay(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("May", [], [], input);
  }
  
  export interface November {
    kind: "November";
  }
  
  export function decodeNovember(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("November", [], [], input);
  }
  
  export interface October {
    kind: "October";
  }
  
  export function decodeOctober(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("October", [], [], input);
  }
  
  export interface September {
    kind: "September";
  }
  
  export function decodeSeptember(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("September", [], [], input);
  }
  
  
  export type MonthParseError = InvalidMonth
  
  export function decodeMonthParseError(varDecoders, input) {
  let decoderMap = new Map();
  decoderMap.set("InvalidMonth", decodeInvalidMonth.bind(varDecoders));
  codecs.decodeCustomType(decoderMap, input);
  }
  
  
  
  export interface InvalidMonth {
    kind: "InvalidMonth";
    arg1: number;
  }
  
  export function decodeInvalidMonth(varDecoders, input) {
  return codecs.decodeCustomTypeVariant("InvalidMonth", ["Arg1"], [codecs.decodeInt.bind(null)], input);
  }
  
  
  export type RawLocalDate = {
    year: number;
    month: number;
    day: number;
  }
  
  export function decodeRawLocalDate(varDecoders, input) {
  return codecs.decodeRecord(new Map([["year", codecs.decodeInt.bind(null)], ["month", codecs.decodeInt.bind(null)], ["day", codecs.decodeInt.bind(null)]]), input);
  }
  
  export function encodeRawLocalDate(varEncoders, value) {
  return codecs.encodeRecord(new Map([["year", codecs.encodeInt.bind(null)], ["month", codecs.encodeInt.bind(null)], ["day", codecs.encodeInt.bind(null)]]), value);
  }
  
  
  export type ValidLocalDate = {
    year: number;
    month: Morphir_Reference_Model_Issues_Issue333.Month;
    day: number;
  }
  
  export function decodeValidLocalDate(varDecoders, input) {
  return codecs.decodeRecord(new Map([["year", codecs.decodeInt.bind(null)], ["month", Morphir_Reference_Model_Issues_Issue333.decodeMonth.bind(null, varDecoders)], ["day", codecs.decodeInt.bind(null)]]), input);
  }
  
  export function encodeValidLocalDate(varEncoders, value) {
  return codecs.encodeRecord(new Map([["year", codecs.encodeInt.bind(null)], ["month", codecs.encodeUnit.bind(null)], ["day", codecs.encodeInt.bind(null)]]), value);
  }
  
}

