// Generated by morphir-elm

import * as codecs from "./../../../../../morphir/internal/Codecs";

export namespace Morphir_Reference_Model_Issues_PatternModel_BasicEnum {
  export type BasicEnum = Five | Four | None | One | Six | Three | Two;

  export function decodeBasicEnum(input: any): BasicEnum {
    let kind = codecs.parseKindFromCustomTypeInput(input);
    switch (kind) {
      case "Five":
        return decodeFive(input);
      case "Four":
        return decodeFour(input);
      case "None":
        return decodeNone(input);
      case "One":
        return decodeOne(input);
      case "Six":
        return decodeSix(input);
      case "Three":
        return decodeThree(input);
      case "Two":
        return decodeTwo(input);
    }
    codecs.raiseDecodeErrorFromCustomType("BasicEnum", kind);
  }

  export function encodeBasicEnum(value: BasicEnum): any {
    switch (value.kind) {
      case "Five":
        return encodeFive(value);
      case "Four":
        return encodeFour(value);
      case "None":
        return encodeNone(value);
      case "One":
        return encodeOne(value);
      case "Six":
        return encodeSix(value);
      case "Three":
        return encodeThree(value);
      case "Two":
        return encodeTwo(value);
    }
  }

  export class Five {
    kind: "Five" = "Five";

    constructor() {}
  }

  export function decodeFive(input: any): Five {
    codecs.preprocessCustomTypeVariant("Five", 0, input);
    return new Five();
  }

  export function encodeFive(value: Five): any {
    return value.kind;
  }

  export class Four {
    kind: "Four" = "Four";

    constructor() {}
  }

  export function decodeFour(input: any): Four {
    codecs.preprocessCustomTypeVariant("Four", 0, input);
    return new Four();
  }

  export function encodeFour(value: Four): any {
    return value.kind;
  }

  export class None {
    kind: "None" = "None";

    constructor() {}
  }

  export function decodeNone(input: any): None {
    codecs.preprocessCustomTypeVariant("None", 0, input);
    return new None();
  }

  export function encodeNone(value: None): any {
    return value.kind;
  }

  export class One {
    kind: "One" = "One";

    constructor() {}
  }

  export function decodeOne(input: any): One {
    codecs.preprocessCustomTypeVariant("One", 0, input);
    return new One();
  }

  export function encodeOne(value: One): any {
    return value.kind;
  }

  export class Six {
    kind: "Six" = "Six";

    constructor() {}
  }

  export function decodeSix(input: any): Six {
    codecs.preprocessCustomTypeVariant("Six", 0, input);
    return new Six();
  }

  export function encodeSix(value: Six): any {
    return value.kind;
  }

  export class Three {
    kind: "Three" = "Three";

    constructor() {}
  }

  export function decodeThree(input: any): Three {
    codecs.preprocessCustomTypeVariant("Three", 0, input);
    return new Three();
  }

  export function encodeThree(value: Three): any {
    return value.kind;
  }

  export class Two {
    kind: "Two" = "Two";

    constructor() {}
  }

  export function decodeTwo(input: any): Two {
    codecs.preprocessCustomTypeVariant("Two", 0, input);
    return new Two();
  }

  export function encodeTwo(value: Two): any {
    return value.kind;
  }
}
