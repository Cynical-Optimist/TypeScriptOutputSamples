// Generated by morphir-elm

import * as codecs from "./../../../../morphir/internal/Codecs";
import { Morphir_Reference_Model_Issues_PatternModel_BasicEnum } from "./../../../../morphir/reference/model/issues/patternmodel/BasicEnum";
import { Morphir_Reference_Model_Issues_PatternModel_OtherBasicEnum } from "./../../../../morphir/reference/model/issues/patternmodel/OtherBasicEnum";

export namespace Morphir_Reference_Model_Issues_Issue409 {
  export type BasicRule = {
    basicEnum: Morphir_Reference_Model_Issues_PatternModel_BasicEnum.BasicEnum;
    otherBasicEnum: Morphir_Reference_Model_Issues_PatternModel_OtherBasicEnum.OtherBasicEnum;
    id: string;
  };

  export function decodeBasicRule(input: any): BasicRule {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        [
          "basicEnum",
          Morphir_Reference_Model_Issues_PatternModel_BasicEnum.decodeBasicEnum,
        ],
        [
          "otherBasicEnum",
          Morphir_Reference_Model_Issues_PatternModel_OtherBasicEnum.decodeOtherBasicEnum,
        ],
        ["id", codecs.decodeString],
      ]),
      input
    );
  }

  export function encodeBasicRule(value: BasicRule): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        [
          "basicEnum",
          Morphir_Reference_Model_Issues_PatternModel_BasicEnum.encodeBasicEnum,
        ],
        [
          "otherBasicEnum",
          Morphir_Reference_Model_Issues_PatternModel_OtherBasicEnum.encodeOtherBasicEnum,
        ],
        ["id", codecs.encodeString],
      ]),
      value
    );
  }
}
