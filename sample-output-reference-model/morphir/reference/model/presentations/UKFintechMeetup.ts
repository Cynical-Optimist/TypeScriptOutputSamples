// Generated by morphir-elm

import * as codecs from "./../../../../morphir/internal/Codecs";

export namespace Morphir_Reference_Model_Presentations_UKFintechMeetup {
  export type Response = Rejected | Reserved;

  export function decodeResponse(input: any): Response {
    let kind = codecs.parseKindFromCustomTypeInput(input);
    switch (kind) {
      case "Rejected":
        return decodeRejected(input);
      case "Reserved":
        return decodeReserved(input);
    }
    codecs.raiseDecodeErrorFromCustomType("Response", kind);
  }

  export function encodeResponse(value: Response): any {
    switch (value.kind) {
      case "Rejected":
        return encodeRejected(value);
      case "Reserved":
        return encodeReserved(value);
    }
  }

  export class Rejected {
    kind: "Rejected" = "Rejected";

    constructor() {}
  }

  export function decodeRejected(input: any): Rejected {
    codecs.preprocessCustomTypeVariant("Rejected", 0, input);
    return new Rejected();
  }

  export function encodeRejected(value: Rejected): any {
    return value.kind;
  }

  export class Reserved {
    kind: "Reserved" = "Reserved";

    constructor(public arg1: number) {}
  }

  export function decodeReserved(input: any): Reserved {
    codecs.preprocessCustomTypeVariant("Reserved", 1, input);
    return new Reserved(codecs.decodeInt(input[1]));
  }

  export function encodeReserved(value: Reserved): any {
    return [value.kind, codecs.encodeInt(value.arg1)];
  }
}
