// Generated by morphir-elm

import * as codecs from "./../../../morphir/internal/Codecs"

export namespace Morphir_Reference_Model_Types {
  
  export type Custom = CustomNoArg | CustomOneArg | CustomTwoArg
  
  
  
  
  
  export interface CustomNoArg {
    kind: "CustomNoArg";
  }
  
  export interface CustomOneArg {
    kind: "CustomOneArg";
    arg1: boolean;
  }
  
  export interface CustomTwoArg {
    kind: "CustomTwoArg";
    arg1: string;
    arg2: Morphir_Reference_Model_Types.Quantity;
  }
  
  export interface Email {
    kind: "Email";
    arg1: string;
  }
  
  export interface FirstName {
    kind: "FirstName";
    arg1: string;
  }
  
  
  export type FooBarBazRecord = {
    foo: string;
    bar: boolean;
    baz: number;
  }
  
  export function decodeFooBarBazRecord(varDecoders, input) {
  return codecs.decodeRecord(new Map([["foo", codecs.decodeString.bind(null)], ["bar", codecs.decodeBoolean.bind(null)], ["baz", codecs.decodeInt.bind(null)]]), input);
  }
  
  export function encodeFooBarBazRecord(varEncoders, value) {
  return codecs.encodeRecord(new Map([["foo", codecs.encodeString.bind(null)], ["bar", codecs.encodeBoolean.bind(null)], ["baz", codecs.encodeInt.bind(null)]]), value);
  }
  
  export interface FullName {
    kind: "FullName";
    arg1: Morphir_Reference_Model_Types.FirstName;
    arg2: Morphir_Reference_Model_Types.LastName;
  }
  
  export interface LastName {
    kind: "LastName";
    arg1: string;
  }
  
  /* Alias referring to another type using a reference.
  */
  export type Quantity = number
  
  export function decodeQuantity(varDecoders, input) {
  return codecs.decodeInt(input);
  }
  
  export function encodeQuantity(varEncoders, value) {
  return codecs.encodeInt(value);
  }
  
}

