// Generated by morphir-elm

import * as codecs from "./../../../morphir/internal/Codecs"

export namespace Morphir_Reference_Model_BooksAndRecords {
  
  export type Deal = {
    product: Morphir_Reference_Model_BooksAndRecords.ProductID;
    price: Morphir_Reference_Model_BooksAndRecords.Price;
    quantity: Morphir_Reference_Model_BooksAndRecords.Quantity;
  }
  
  export function decodeDeal(varDecoders, input) {
  return codecs.decodeRecord(new Map([["product", codecs.decodeUnit.bind(null)], ["price", codecs.decodeUnit.bind(null)], ["quantity", codecs.decodeUnit.bind(null)]]), input);
  }
  
  export function encodeDeal(varEncoders, value) {
  return codecs.encodeRecord(new Map([["product", codecs.encodeUnit.bind(null)], ["price", codecs.encodeUnit.bind(null)], ["quantity", codecs.encodeUnit.bind(null)]]), value);
  }
  
  
  export type DealCmd = CloseDeal | OpenDeal
  
  
  
  
  
  export interface CloseDeal {
    kind: "CloseDeal";
    arg1: Morphir_Reference_Model_BooksAndRecords.ProductID;
  }
  
  export interface OpenDeal {
    kind: "OpenDeal";
    arg1: Morphir_Reference_Model_BooksAndRecords.ProductID;
    arg2: Morphir_Reference_Model_BooksAndRecords.Price;
    arg3: Morphir_Reference_Model_BooksAndRecords.Quantity;
  }
  
  
  export type DealEvent = DealClosed | DealNotFound | DealOpened | DuplicateDeal | InvalidPrice | InvalidQuantity
  
  
  
  
  
  export interface DealClosed {
    kind: "DealClosed";
    arg1: Morphir_Reference_Model_BooksAndRecords.ProductID;
  }
  
  export interface DealNotFound {
    kind: "DealNotFound";
    arg1: Morphir_Reference_Model_BooksAndRecords.ProductID;
  }
  
  export interface DealOpened {
    kind: "DealOpened";
    arg1: Morphir_Reference_Model_BooksAndRecords.ProductID;
    arg2: Morphir_Reference_Model_BooksAndRecords.Price;
    arg3: Morphir_Reference_Model_BooksAndRecords.Quantity;
  }
  
  export interface DuplicateDeal {
    kind: "DuplicateDeal";
    arg1: Morphir_Reference_Model_BooksAndRecords.ProductID;
  }
  
  export interface InvalidPrice {
    kind: "InvalidPrice";
    arg1: Morphir_Reference_Model_BooksAndRecords.Price;
  }
  
  export interface InvalidQuantity {
    kind: "InvalidQuantity";
    arg1: Morphir_Reference_Model_BooksAndRecords.Quantity;
  }
  
  
  export type ID = string
  
  export function decodeID(varDecoders, input) {
  return codecs.decodeString(input);
  }
  
  export function encodeID(varEncoders, value) {
  return codecs.encodeString(value);
  }
  
  
  export type Inventory = {
    supplier: Morphir_Reference_Model_BooksAndRecords.SupplierID;
    product: Morphir_Reference_Model_BooksAndRecords.ProductID;
    quantity: Morphir_Reference_Model_BooksAndRecords.Quantity;
  }
  
  export function decodeInventory(varDecoders, input) {
  return codecs.decodeRecord(new Map([["supplier", codecs.decodeUnit.bind(null)], ["product", codecs.decodeUnit.bind(null)], ["quantity", codecs.decodeUnit.bind(null)]]), input);
  }
  
  export function encodeInventory(varEncoders, value) {
  return codecs.encodeRecord(new Map([["supplier", codecs.encodeUnit.bind(null)], ["product", codecs.encodeUnit.bind(null)], ["quantity", codecs.encodeUnit.bind(null)]]), value);
  }
  
  
  export type Position = {
    product: Morphir_Reference_Model_BooksAndRecords.ProductID;
    quantity: Morphir_Reference_Model_BooksAndRecords.Quantity;
  }
  
  export function decodePosition(varDecoders, input) {
  return codecs.decodeRecord(new Map([["product", codecs.decodeUnit.bind(null)], ["quantity", codecs.decodeUnit.bind(null)]]), input);
  }
  
  export function encodePosition(varEncoders, value) {
  return codecs.encodeRecord(new Map([["product", codecs.encodeUnit.bind(null)], ["quantity", codecs.encodeUnit.bind(null)]]), value);
  }
  
  
  export type Price = number
  
  export function decodePrice(varDecoders, input) {
  return codecs.decodeFloat(input);
  }
  
  export function encodePrice(varEncoders, value) {
  return codecs.encodeFloat(value);
  }
  
  
  export type ProductID = string
  
  export function decodeProductID(varDecoders, input) {
  return codecs.decodeString(input);
  }
  
  export function encodeProductID(varEncoders, value) {
  return codecs.encodeString(value);
  }
  
  
  export type Quantity = number
  
  export function decodeQuantity(varDecoders, input) {
  return codecs.decodeInt(input);
  }
  
  export function encodeQuantity(varEncoders, value) {
  return codecs.encodeInt(value);
  }
  
  
  export type SupplierID = string
  
  export function decodeSupplierID(varDecoders, input) {
  return codecs.decodeString(input);
  }
  
  export function encodeSupplierID(varEncoders, value) {
  return codecs.encodeString(value);
  }
  
}

