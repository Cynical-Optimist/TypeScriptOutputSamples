// Generated by morphir-elm

import * as codecs from "./../../../morphir/internal/Codecs";

export namespace Morphir_Reference_Model_BooksAndRecords {
  export type Deal = {
    product: Morphir_Reference_Model_BooksAndRecords.ProductID;
    price: Morphir_Reference_Model_BooksAndRecords.Price;
    quantity: Morphir_Reference_Model_BooksAndRecords.Quantity;
  };

  export function decodeDeal(input: any): Deal {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        ["product", Morphir_Reference_Model_BooksAndRecords.decodeProductID],
        ["price", Morphir_Reference_Model_BooksAndRecords.decodePrice],
        ["quantity", Morphir_Reference_Model_BooksAndRecords.decodeQuantity],
      ]),
      input
    );
  }

  export function encodeDeal(value: Deal): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        ["product", Morphir_Reference_Model_BooksAndRecords.encodeProductID],
        ["price", Morphir_Reference_Model_BooksAndRecords.encodePrice],
        ["quantity", Morphir_Reference_Model_BooksAndRecords.encodeQuantity],
      ]),
      value
    );
  }

  export type DealCmd = CloseDeal | OpenDeal;

  export function decodeDealCmd(input: any): DealCmd {
    let kind = codecs.parseKindFromCustomTypeInput(input);
    switch (kind) {
      case "CloseDeal":
        return decodeCloseDeal(input);
      case "OpenDeal":
        return decodeOpenDeal(input);
    }
    codecs.raiseDecodeErrorFromCustomType("DealCmd", kind);
  }

  export function encodeDealCmd(value: DealCmd): any {
    switch (value.kind) {
      case "CloseDeal":
        return encodeCloseDeal(value);
      case "OpenDeal":
        return encodeOpenDeal(value);
    }
  }

  export class CloseDeal {
    kind: "CloseDeal" = "CloseDeal";

    constructor(
      public arg1: Morphir_Reference_Model_BooksAndRecords.ProductID
    ) {}
  }

  export function decodeCloseDeal(input: any): CloseDeal {
    codecs.preprocessCustomTypeVariant("CloseDeal", 1, input);
    return new CloseDeal(
      Morphir_Reference_Model_BooksAndRecords.decodeProductID(input[1])
    );
  }

  export function encodeCloseDeal(value: CloseDeal): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodeProductID(value.arg1),
    ];
  }

  export class OpenDeal {
    kind: "OpenDeal" = "OpenDeal";

    constructor(
      public arg1: Morphir_Reference_Model_BooksAndRecords.ProductID,
      public arg2: Morphir_Reference_Model_BooksAndRecords.Price,
      public arg3: Morphir_Reference_Model_BooksAndRecords.Quantity
    ) {}
  }

  export function decodeOpenDeal(input: any): OpenDeal {
    codecs.preprocessCustomTypeVariant("OpenDeal", 3, input);
    return new OpenDeal(
      Morphir_Reference_Model_BooksAndRecords.decodeProductID(input[1]),
      Morphir_Reference_Model_BooksAndRecords.decodePrice(input[2]),
      Morphir_Reference_Model_BooksAndRecords.decodeQuantity(input[3])
    );
  }

  export function encodeOpenDeal(value: OpenDeal): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodeProductID(value.arg1),
      Morphir_Reference_Model_BooksAndRecords.encodePrice(value.arg2),
      Morphir_Reference_Model_BooksAndRecords.encodeQuantity(value.arg3),
    ];
  }

  export type DealEvent =
    | DealClosed
    | DealNotFound
    | DealOpened
    | DuplicateDeal
    | InvalidPrice
    | InvalidQuantity;

  export function decodeDealEvent(input: any): DealEvent {
    let kind = codecs.parseKindFromCustomTypeInput(input);
    switch (kind) {
      case "DealClosed":
        return decodeDealClosed(input);
      case "DealNotFound":
        return decodeDealNotFound(input);
      case "DealOpened":
        return decodeDealOpened(input);
      case "DuplicateDeal":
        return decodeDuplicateDeal(input);
      case "InvalidPrice":
        return decodeInvalidPrice(input);
      case "InvalidQuantity":
        return decodeInvalidQuantity(input);
    }
    codecs.raiseDecodeErrorFromCustomType("DealEvent", kind);
  }

  export function encodeDealEvent(value: DealEvent): any {
    switch (value.kind) {
      case "DealClosed":
        return encodeDealClosed(value);
      case "DealNotFound":
        return encodeDealNotFound(value);
      case "DealOpened":
        return encodeDealOpened(value);
      case "DuplicateDeal":
        return encodeDuplicateDeal(value);
      case "InvalidPrice":
        return encodeInvalidPrice(value);
      case "InvalidQuantity":
        return encodeInvalidQuantity(value);
    }
  }

  export class DealClosed {
    kind: "DealClosed" = "DealClosed";

    constructor(
      public arg1: Morphir_Reference_Model_BooksAndRecords.ProductID
    ) {}
  }

  export function decodeDealClosed(input: any): DealClosed {
    codecs.preprocessCustomTypeVariant("DealClosed", 1, input);
    return new DealClosed(
      Morphir_Reference_Model_BooksAndRecords.decodeProductID(input[1])
    );
  }

  export function encodeDealClosed(value: DealClosed): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodeProductID(value.arg1),
    ];
  }

  export class DealNotFound {
    kind: "DealNotFound" = "DealNotFound";

    constructor(
      public arg1: Morphir_Reference_Model_BooksAndRecords.ProductID
    ) {}
  }

  export function decodeDealNotFound(input: any): DealNotFound {
    codecs.preprocessCustomTypeVariant("DealNotFound", 1, input);
    return new DealNotFound(
      Morphir_Reference_Model_BooksAndRecords.decodeProductID(input[1])
    );
  }

  export function encodeDealNotFound(value: DealNotFound): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodeProductID(value.arg1),
    ];
  }

  export class DealOpened {
    kind: "DealOpened" = "DealOpened";

    constructor(
      public arg1: Morphir_Reference_Model_BooksAndRecords.ProductID,
      public arg2: Morphir_Reference_Model_BooksAndRecords.Price,
      public arg3: Morphir_Reference_Model_BooksAndRecords.Quantity
    ) {}
  }

  export function decodeDealOpened(input: any): DealOpened {
    codecs.preprocessCustomTypeVariant("DealOpened", 3, input);
    return new DealOpened(
      Morphir_Reference_Model_BooksAndRecords.decodeProductID(input[1]),
      Morphir_Reference_Model_BooksAndRecords.decodePrice(input[2]),
      Morphir_Reference_Model_BooksAndRecords.decodeQuantity(input[3])
    );
  }

  export function encodeDealOpened(value: DealOpened): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodeProductID(value.arg1),
      Morphir_Reference_Model_BooksAndRecords.encodePrice(value.arg2),
      Morphir_Reference_Model_BooksAndRecords.encodeQuantity(value.arg3),
    ];
  }

  export class DuplicateDeal {
    kind: "DuplicateDeal" = "DuplicateDeal";

    constructor(
      public arg1: Morphir_Reference_Model_BooksAndRecords.ProductID
    ) {}
  }

  export function decodeDuplicateDeal(input: any): DuplicateDeal {
    codecs.preprocessCustomTypeVariant("DuplicateDeal", 1, input);
    return new DuplicateDeal(
      Morphir_Reference_Model_BooksAndRecords.decodeProductID(input[1])
    );
  }

  export function encodeDuplicateDeal(value: DuplicateDeal): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodeProductID(value.arg1),
    ];
  }

  export class InvalidPrice {
    kind: "InvalidPrice" = "InvalidPrice";

    constructor(public arg1: Morphir_Reference_Model_BooksAndRecords.Price) {}
  }

  export function decodeInvalidPrice(input: any): InvalidPrice {
    codecs.preprocessCustomTypeVariant("InvalidPrice", 1, input);
    return new InvalidPrice(
      Morphir_Reference_Model_BooksAndRecords.decodePrice(input[1])
    );
  }

  export function encodeInvalidPrice(value: InvalidPrice): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodePrice(value.arg1),
    ];
  }

  export class InvalidQuantity {
    kind: "InvalidQuantity" = "InvalidQuantity";

    constructor(
      public arg1: Morphir_Reference_Model_BooksAndRecords.Quantity
    ) {}
  }

  export function decodeInvalidQuantity(input: any): InvalidQuantity {
    codecs.preprocessCustomTypeVariant("InvalidQuantity", 1, input);
    return new InvalidQuantity(
      Morphir_Reference_Model_BooksAndRecords.decodeQuantity(input[1])
    );
  }

  export function encodeInvalidQuantity(value: InvalidQuantity): any {
    return [
      value.kind,
      Morphir_Reference_Model_BooksAndRecords.encodeQuantity(value.arg1),
    ];
  }

  export type ID = string;

  export function decodeID(input: any): ID {
    return codecs.decodeString(input);
  }

  export function encodeID(value: ID): any {
    return codecs.encodeString(value);
  }

  export type Inventory = {
    supplier: Morphir_Reference_Model_BooksAndRecords.SupplierID;
    product: Morphir_Reference_Model_BooksAndRecords.ProductID;
    quantity: Morphir_Reference_Model_BooksAndRecords.Quantity;
  };

  export function decodeInventory(input: any): Inventory {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        ["supplier", Morphir_Reference_Model_BooksAndRecords.decodeSupplierID],
        ["product", Morphir_Reference_Model_BooksAndRecords.decodeProductID],
        ["quantity", Morphir_Reference_Model_BooksAndRecords.decodeQuantity],
      ]),
      input
    );
  }

  export function encodeInventory(value: Inventory): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        ["supplier", Morphir_Reference_Model_BooksAndRecords.encodeSupplierID],
        ["product", Morphir_Reference_Model_BooksAndRecords.encodeProductID],
        ["quantity", Morphir_Reference_Model_BooksAndRecords.encodeQuantity],
      ]),
      value
    );
  }

  export type Position = {
    product: Morphir_Reference_Model_BooksAndRecords.ProductID;
    quantity: Morphir_Reference_Model_BooksAndRecords.Quantity;
  };

  export function decodePosition(input: any): Position {
    return codecs.decodeRecord(
      codecs.buildCodecMap([
        ["product", Morphir_Reference_Model_BooksAndRecords.decodeProductID],
        ["quantity", Morphir_Reference_Model_BooksAndRecords.decodeQuantity],
      ]),
      input
    );
  }

  export function encodePosition(value: Position): any {
    return codecs.encodeRecord(
      codecs.buildCodecMap([
        ["product", Morphir_Reference_Model_BooksAndRecords.encodeProductID],
        ["quantity", Morphir_Reference_Model_BooksAndRecords.encodeQuantity],
      ]),
      value
    );
  }

  export type Price = number;

  export function decodePrice(input: any): Price {
    return codecs.decodeFloat(input);
  }

  export function encodePrice(value: Price): any {
    return codecs.encodeFloat(value);
  }

  export type ProductID = string;

  export function decodeProductID(input: any): ProductID {
    return codecs.decodeString(input);
  }

  export function encodeProductID(value: ProductID): any {
    return codecs.encodeString(value);
  }

  export type Quantity = number;

  export function decodeQuantity(input: any): Quantity {
    return codecs.decodeInt(input);
  }

  export function encodeQuantity(value: Quantity): any {
    return codecs.encodeInt(value);
  }

  export type SupplierID = string;

  export function decodeSupplierID(input: any): SupplierID {
    return codecs.decodeString(input);
  }

  export function encodeSupplierID(value: SupplierID): any {
    return codecs.encodeString(value);
  }
}
